from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import OPERATOR_IDS
from ticket_db import (
    get_open_tickets,
    get_ticket_by_id,
    close_ticket_by_user_id,
    delete_ticket_by_user_id
)

router = Router()

class Operator(StatesGroup):
    replying_to = State()

# üëá –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID —Ç–∏–∫–µ—Ç–∞, –∞ –Ω–µ user_id
@router.callback_query(F.data.startswith("reply_"))
async def reply_ticket(call: CallbackQuery, state: FSMContext):
    ticket_id = int(call.data.split("_")[1])
    ticket = get_ticket_by_id(ticket_id)
    if not ticket:
        await call.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.set_state(Operator.replying_to)
    await state.update_data(ticket=ticket)
    await call.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{ticket['username']}")
    await call.answer()

@router.message(Operator.replying_to)
async def send_operator_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    ticket = data.get("ticket")
    if ticket:
        await message.bot.send_message(
            ticket["user_id"],
            f"<b>–û–ø–µ—Ä–∞—Ç–æ—Ä –î—É—Å—è:</b>\n{message.text}"
        )
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.clear()

@router.callback_query(F.data.startswith("close_"))
async def close_ticket(call: CallbackQuery):
    ticket_id = int(call.data.split("_")[1])
    ticket = get_ticket_by_id(ticket_id)
    if not ticket:
        await call.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    close_ticket_by_user_id(ticket["user_id"])
    await call.message.edit_text("–û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
    await call.answer("–ó–∞–∫—Ä—ã—Ç–æ.")

@router.callback_query(F.data.startswith("delete_"))
async def delete_ticket(call: CallbackQuery):
    ticket_id = int(call.data.split("_")[1])
    ticket = get_ticket_by_id(ticket_id)
    if not ticket:
        await call.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    delete_ticket_by_user_id(ticket["user_id"])
    await call.message.edit_text("–û–±—Ä–∞—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    await call.answer("–£–¥–∞–ª–µ–Ω–æ.")

@router.message(F.text.startswith("/view "))
async def view_ticket(message: Message):
    if message.chat.id not in OPERATOR_IDS:
        return

    try:
        ticket_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view <id>")
        return

    ticket = get_ticket_by_id(ticket_id)
    if not ticket:
        await message.answer("–¢–∏–∫–µ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = (
        f"<b>–¢–∏–∫–µ—Ç #{ticket['id']}</b>\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket['category']}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{ticket['username']}\n"
        f"–°—Ç–∞—Ç—É—Å: {ticket['status']}\n"
        f"–°–æ–∑–¥–∞–Ω: {ticket['created_at']}\n\n"
        f"{ticket['text']}"
    )
    if ticket["photo"]:
        await message.bot.send_photo(message.chat.id, photo=ticket["photo"], caption=text)
    else:
        await message.answer(text)

@router.message(F.text == "/list")
async def list_tickets(message: Message):
    if message.chat.id not in OPERATOR_IDS:
        return

    tickets = get_open_tickets()
    if not tickets:
        await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return

    text = "\n\n".join([
        f"#{t['id']} | @{t['username']} | {t['category']}\n{t['text'][:100]}..."
        for t in tickets
    ])
    await message.answer(f"<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n\n{text}")
